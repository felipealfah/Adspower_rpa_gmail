import os
import logging
import requests
import time
import json
from credentials.credentials_manager import load_credentials, get_credential

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# URL base da API SMS-Activate
BASE_URL = "https://api.sms-activate.org/stubs/handler_api.php"


class SMSAPI:
    def __init__(self, api_key=None):
        # Se api_key for fornecido, use-o. Caso contr√°rio, carregue das credenciais
        self.api_key = api_key or get_credential("SMS_ACTIVATE_API_KEY")
        self.base_url = "https://api.sms-activate.org/stubs/handler_api.php"

        # Lista de pa√≠ses selecionados com seus c√≥digos
        self.selected_countries = {
            "73": "Brasil",
            "151": "Chile",
            "12": "Estados Unidos",
            "40": "Canad√°",
            "16": "Reino Unido",
            "117": "Portugal"
        }

    def refresh_credentials(self):
        """Atualiza a chave da API carregando as credenciais mais recentes."""
        self.api_key = get_credential("SMS_ACTIVATE_API_KEY")

        if not self.api_key:
            logger.error(
                "‚ùå ERRO: A chave 'SMS_ACTIVATE_API_KEY' n√£o foi encontrada em credentials.json.")
            return False
        return True

    def get_balance(self):
        """Obt√©m o saldo atual da conta."""
        # Sempre atualizar a chave antes de uma opera√ß√£o importante
        self.refresh_credentials()

        params = {'api_key': self.api_key, 'action': 'getBalance'}
        try:
            response = requests.get(BASE_URL, params=params)
            if response.status_code == 200 and 'ACCESS_BALANCE' in response.text:
                balance = float(response.text.split(':')[1])
                logger.info(f"üí∞ Saldo dispon√≠vel: {balance} RUB")
                return balance
            else:
                logger.error(f"Erro ao obter saldo: {response.text}")
                return None
        except Exception as e:
            logger.error(f"Erro ao se conectar √† API SMS: {str(e)}")
            return None

    def get_prices(self, service=None):
        """
        Obt√©m pre√ßos dos n√∫meros de telefone por pa√≠s e servi√ßo.

        Args:
            service (str, optional): C√≥digo do servi√ßo (ex: "go" para Gmail, "tk" para TikTok).
                                    Se None, retorna todos os servi√ßos.

        Returns:
            dict: Dicion√°rio estruturado com pre√ßos e quantidades dispon√≠veis.
        """
        # Sempre atualizar a chave
        self.refresh_credentials()

        params = {'api_key': self.api_key, 'action': 'getPrices'}

        try:
            response = requests.get(BASE_URL, params=params, timeout=10)

            if response.status_code != 200:
                logger.error(f"Erro ao obter pre√ßos: {response.text}")
                return None

            data = response.json()
            prices = {}

            for country, services in data.items():
                if country in self.selected_countries:
                    for srv, details in services.items():
                        if service is None or srv == service:  # Filtra pelo servi√ßo se especificado
                            prices.setdefault(country, {})[srv] = {
                                "cost": float(details["cost"]),
                                "count": int(details["count"])
                            }

            return prices
        except Exception as e:
            logger.error(f"Erro ao obter pre√ßos: {str(e)}")
            return None

    def get_number_status(self, country, service):
        """Verifica disponibilidade de n√∫meros para um servi√ßo em um pa√≠s espec√≠fico."""
        # Atualizar credenciais
        self.refresh_credentials()

        params = {
            'api_key': self.api_key,
            'action': 'getNumbersStatus',
            'country': country
        }

        try:
            response = requests.get(BASE_URL, params=params, timeout=10)
            if response.status_code == 200:
                data = response.json()
                # Retorna a quantidade dispon√≠vel
                return int(data.get(service, 0))
            else:
                logger.error(
                    f"Erro ao verificar disponibilidade: {response.text}")
                return 0
        except Exception as e:
            logger.error(f"Erro ao verificar status dos n√∫meros: {str(e)}")
            return 0

    def get_cheapest_country(self, service):
        """Encontra o pa√≠s mais barato para um servi√ßo dentro dos pa√≠ses selecionados."""
        prices = self.get_prices()
        if not prices:
            return None, None

        cheapest_country = None
        lowest_price = float('inf')

        for country_code in self.selected_countries.keys():
            if country_code in prices and service in prices[country_code]:
                price = float(prices[country_code][service]['cost'])
                available = int(prices[country_code][service]['count'])
                if price < lowest_price and available > 0:
                    lowest_price = price
                    cheapest_country = country_code

        if cheapest_country:
            logger.info(
                f"üåç Pa√≠s mais barato para {service}: {self.selected_countries[cheapest_country]} - {lowest_price} RUB")
            return cheapest_country, lowest_price
        else:
            logger.warning(f"Nenhum pa√≠s dispon√≠vel para {service}")
            return None, None

    def buy_number(self, service, country):
        """Compra um n√∫mero de telefone com valida√ß√£o melhorada."""
        self.refresh_credentials()

        params = {
            'api_key': self.api_key,
            'action': 'getNumber',
            'service': service,
            'country': country
        }

        try:
            response = requests.get(self.base_url, params=params, timeout=15)
            response_text = response.text

            if "ACCESS_NUMBER" in response_text:
                _, activation_id, phone_number = response_text.split(":")
                logger.info(
                    f"‚úÖ N√∫mero comprado com sucesso: {phone_number} (ID: {activation_id})")

                # Validar dados antes de retornar
                if not all([activation_id, phone_number]):
                    raise ValueError(
                        "Dados do n√∫mero incompletos na resposta da API")

                return activation_id.strip(), phone_number.strip()

            # Tratamento de erros espec√≠ficos
            error_messages = {
                "NO_NUMBERS": "Sem n√∫meros dispon√≠veis",
                "NO_BALANCE": "Saldo insuficiente",
                "BAD_SERVICE": "Servi√ßo inv√°lido",
                "BAD_KEY": "Chave de API inv√°lida"
            }

            for error_code, message in error_messages.items():
                if error_code in response_text:
                    logger.error(
                        f"‚ùå {message} para {service} no pa√≠s {country}")
                    return None, None

            logger.error(f"‚ùå Erro desconhecido: {response_text}")
            return None, None

        except Exception as e:
            logger.error(f"‚ùå Erro ao comprar n√∫mero: {str(e)}")
            return None, None

    def get_sms_code(self, activation_id, max_attempts=10, interval=10):
        """Verifica se o SMS foi recebido e retorna o c√≥digo."""
        # Atualizar credenciais
        self.refresh_credentials()

        params = {'api_key': self.api_key,
                  'action': 'getStatus', 'id': activation_id}
        logger.info(f"üì© Aguardando SMS para ID {activation_id}...")

        for attempt in range(max_attempts):
            try:
                response = requests.get(BASE_URL, params=params, timeout=15)
                if response.status_code == 200:
                    if 'STATUS_OK' in response.text:
                        _, code = response.text.split(':')
                        logger.info(f"‚úÖ C√≥digo recebido: {code}")
                        # Confirma√ß√£o de c√≥digo recebido
                        self.set_status(activation_id, 3)
                        return code
                    elif 'STATUS_CANCEL' in response.text:
                        logger.warning("üö® Ativa√ß√£o cancelada pelo sistema.")
                        return None
                else:
                    logger.error(f"Erro ao verificar SMS: {response.text}")
            except Exception as e:
                logger.error(f"Erro ao verificar c√≥digo SMS: {str(e)}")

            time.sleep(interval)

        logger.warning("‚è≥ Tempo esgotado, nenhum SMS recebido.")
        self.set_status(activation_id, 6)  # Cancelar ativa√ß√£o
        return None

    def set_status(self, activation_id, status):
        """
        Define o status da ativa√ß√£o:
            1 = N√∫mero recebido e aguardando SMS
            3 = C√≥digo SMS recebido e inserido
            6 = Cancelar n√∫mero (caso n√£o seja mais necess√°rio)
            8 = N√∫mero confirmado com sucesso
        """
        # Atualizar credenciais
        self.refresh_credentials()

        params = {
            "api_key": self.api_key,
            "action": "setStatus",
            "id": activation_id,
            "status": status
        }

        try:
            response = requests.get(BASE_URL, params=params, timeout=10)

            if response.status_code == 200:
                if "ACCESS_CANCEL" in response.text:
                    logger.info(
                        f"‚úÖ N√∫mero {activation_id} cancelado com sucesso.")
                    return True
                elif "NO_ACTIVATION" in response.text:
                    logger.warning(
                        f"‚ö†Ô∏è N√£o foi poss√≠vel cancelar o n√∫mero {activation_id}. Ele pode j√° estar expirado ou inv√°lido.")
                else:
                    logger.error(
                        f"‚ùå Erro ao cancelar o n√∫mero {activation_id}: {response.text}")
            else:
                logger.error(
                    f"‚ùå Erro de conex√£o ao tentar cancelar o n√∫mero {activation_id}: {response.status_code}")
        except Exception as e:
            logger.error(f"Erro ao definir status da ativa√ß√£o: {str(e)}")

        return False  # Retorna False caso a opera√ß√£o n√£o tenha sido bem-sucedida

    def reuse_number_for_service(self, activation_id, new_service):
        """
        Tenta reutilizar um n√∫mero para um servi√ßo diferente.

        Args:
            activation_id (str): ID da ativa√ß√£o original.
            new_service (str): C√≥digo do novo servi√ßo (ex: "tk" para TikTok).

        Returns:
            bool: True se a reutiliza√ß√£o for bem-sucedida, False caso contr√°rio.
        """
        # Atualizar credenciais
        self.refresh_credentials()

        params = {
            "api_key": self.api_key,
            "action": "getExtraService",
            "id": activation_id,
            "service": new_service
        }

        try:
            response = requests.get(BASE_URL, params=params, timeout=10)
            if "ACCESS_EXTRA_SERVICE" in response.text:
                logger.info(
                    f"‚úÖ N√∫mero reutilizado com sucesso para {new_service} (ID: {activation_id})")
                return True
            else:
                logger.warning(
                    f"‚ùå Falha ao reutilizar n√∫mero para {new_service}: {response.text}")
                return False
        except Exception as e:
            logger.error(f"Erro ao reutilizar n√∫mero: {str(e)}")
            return False

    def compare_prices_in_selected_countries(self, service):
        """
        Compara os pre√ßos e disponibilidade de um servi√ßo entre os pa√≠ses selecionados.

        Args:
            service (str): C√≥digo do servi√ßo para verificar (ex: "go" para Gmail).

        Returns:
            list: Lista ordenada de dicion√°rios com informa√ß√µes de cada pa√≠s.
        """
        try:
            all_prices = self.get_prices()  # Obt√©m todos os pre√ßos dispon√≠veis

            if not all_prices:
                logger.error(
                    f"‚ùå Erro: N√£o foi poss√≠vel obter os pre√ßos para o servi√ßo {service}.")
                return []

            logger.info(f"üìä üîç Dados brutos retornados pela API para {service}")
            service_prices = []

            # Filtrar apenas os pa√≠ses selecionados
            for country_code, country_name in self.selected_countries.items():
                if country_code in all_prices and service in all_prices[country_code]:
                    try:
                        # üí∞ Obt√©m o pre√ßo
                        price_rub = float(
                            all_prices[country_code][service]["cost"])
                        # üî¢ Obt√©m a quantidade dispon√≠vel
                        available_count = int(
                            all_prices[country_code][service]["count"])

                        service_prices.append({
                            'country_code': country_code,
                            'country_name': country_name,
                            'price': price_rub,
                            'available': available_count
                        })

                        logger.info(
                            f"‚úÖ {country_name}: {price_rub} RUB ({available_count} dispon√≠veis)")

                    except (ValueError, KeyError) as e:
                        logger.warning(
                            f"‚ö†Ô∏è Erro ao processar pre√ßos para {service} no pa√≠s {country_name}: {str(e)}")
                        continue

            # Ordenar os pa√≠ses por pre√ßo (do mais barato para o mais caro)
            sorted_prices = sorted(service_prices, key=lambda x: x['price'])

            if not sorted_prices:
                logger.warning(
                    f"‚ö†Ô∏è Nenhum n√∫mero dispon√≠vel para {service} nos pa√≠ses selecionados.")

            return sorted_prices

        except Exception as e:
            logger.error(
                f"‚ùå Erro ao comparar pre√ßos nos pa√≠ses selecionados para {service}: {str(e)}")
            return []

    # Alias para manter compatibilidade com c√≥digo existente
    def get_number(self, service, country):
        """
        Alias para o m√©todo buy_number para compatibilidade com c√≥digo existente.

        Args:
            service (str): C√≥digo do servi√ßo (ex: "go" para Gmail)
            country (str): C√≥digo do pa√≠s

        Returns:
            tuple: (activation_id, phone_number) ou (None, None) em caso de falha
        """
        return self.buy_number(service, country)

    def buy_number_multi_service(self, services, country, operator=None, max_price=None):
        """
        Compra um n√∫mero compat√≠vel com m√∫ltiplos servi√ßos simultaneamente.

        Args:
            services (list): Lista de c√≥digos de servi√ßo (ex: ["go", "tk", "ig"])
            country (str): C√≥digo do pa√≠s
            operator (str, optional): C√≥digo da operadora (espec√≠fico para Brasil: "claro", "vivo", "tim", "oi")
            max_price (float, optional): Pre√ßo m√°ximo aceit√°vel em rublos

        Returns:
            tuple: (activation_id, phone_number) ou (None, None) em caso de falha
        """
        self.refresh_credentials()

        # Converter lista de servi√ßos para string separada por v√≠rgulas
        services_str = ",".join(services)

        params = {
            'api_key': self.api_key,
            'action': 'getNumber',
            'service': services_str,
            'country': country,
            'multiService': '1'  # Par√¢metro para indicar que queremos um n√∫mero multi-servi√ßo
        }

        # Adicionar par√¢metros opcionais se fornecidos
        if operator:
            params['operator'] = operator

        if max_price:
            params['maxPrice'] = str(max_price)

        # Adicionar ID de refer√™ncia para rastreamento (unix timestamp)
        params['ref'] = str(int(time.time()))

        try:
            logger.info(
                f"üîç Buscando n√∫mero multi-servi√ßo para {services_str} no pa√≠s {country}...")
            if operator:
                logger.info(f"üì± Operadora especificada: {operator}")
            if max_price:
                logger.info(f"üí∞ Pre√ßo m√°ximo: {max_price} RUB")

            response = requests.get(self.base_url, params=params, timeout=15)
            response_text = response.text

            if "ACCESS_NUMBER" in response_text:
                _, activation_id, phone_number = response_text.split(":")
                logger.info(
                    f"‚úÖ N√∫mero multi-servi√ßo comprado com sucesso: {phone_number} (ID: {activation_id})")
                logger.info(f"‚úÖ Servi√ßos habilitados: {services_str}")

                # Validar dados antes de retornar
                if not all([activation_id, phone_number]):
                    raise ValueError(
                        "Dados do n√∫mero incompletos na resposta da API")

                return activation_id.strip(), phone_number.strip()

            # Tratamento de erros espec√≠ficos
            error_messages = {
                "NO_NUMBERS": f"Sem n√∫meros multi-servi√ßo dispon√≠veis para {services_str} no pa√≠s {country}",
                "NO_BALANCE": "Saldo insuficiente",
                "BAD_SERVICE": "Um ou mais c√≥digos de servi√ßo inv√°lidos",
                "BAD_KEY": "Chave de API inv√°lida",
                "MAX_PRICE_LOWER": "Pre√ßo m√°ximo definido √© menor que o pre√ßo m√≠nimo dispon√≠vel"
            }

            for error_code, message in error_messages.items():
                if error_code in response_text:
                    logger.error(f"‚ùå {message}")
                    return None, None

            logger.error(f"‚ùå Erro desconhecido: {response_text}")
            return None, None

        except Exception as e:
            logger.error(f"‚ùå Erro ao comprar n√∫mero multi-servi√ßo: {str(e)}")
            return None, None

    def buy_number_with_webhook(self, service, country, webhook_url):
        """
        Compra um n√∫mero com configura√ß√£o de webhook para receber notifica√ß√µes autom√°ticas.

        Args:
            service (str): C√≥digo do servi√ßo (ex: "go" para Gmail)
            country (str): C√≥digo do pa√≠s
            webhook_url (str): URL completa do webhook para receber notifica√ß√µes

        Returns:
            tuple: (activation_id, phone_number) ou (None, None) em caso de falha
        """
        self.refresh_credentials()

        params = {
            'api_key': self.api_key,
            'action': 'getNumber',
            'service': service,
            'country': country,
            'webhook': webhook_url  # Par√¢metro para configurar o webhook
        }

        try:
            response = requests.get(self.base_url, params=params, timeout=15)
            response_text = response.text

            if "ACCESS_NUMBER" in response_text:
                _, activation_id, phone_number = response_text.split(":")
                logger.info(
                    f"‚úÖ N√∫mero comprado com webhook: {phone_number} (ID: {activation_id})")

                # Registrar o webhook para este activation_id
                self._register_webhook_callback(activation_id, webhook_url)

                return activation_id.strip(), phone_number.strip()

            # Tratamento de erros espec√≠ficos (similar ao m√©todo buy_number)
            error_messages = {
                "NO_NUMBERS": "Sem n√∫meros dispon√≠veis",
                "NO_BALANCE": "Saldo insuficiente",
                "BAD_SERVICE": "Servi√ßo inv√°lido",
                "BAD_KEY": "Chave de API inv√°lida"
            }

            for error_code, message in error_messages.items():
                if error_code in response_text:
                    logger.error(
                        f"‚ùå {message} para {service} no pa√≠s {country}")
                    return None, None

            logger.error(f"‚ùå Erro desconhecido: {response_text}")
            return None, None

        except Exception as e:
            logger.error(f"‚ùå Erro ao comprar n√∫mero com webhook: {str(e)}")
            return None, None

    def buy_multi_service_with_webhook(self, services, country, webhook_url):
        """
        Compra um n√∫mero compat√≠vel com m√∫ltiplos servi√ßos e configura webhook.

        Args:
            services (list): Lista de c√≥digos de servi√ßo (ex: ["go", "tk", "ig"])
            country (str): C√≥digo do pa√≠s
            webhook_url (str): URL completa do webhook para receber notifica√ß√µes

        Returns:
            tuple: (activation_id, phone_number) ou (None, None) em caso de falha
        """
        self.refresh_credentials()

        # Converter lista de servi√ßos para string separada por v√≠rgulas
        services_str = ",".join(services)

        params = {
            'api_key': self.api_key,
            'action': 'getNumber',
            'service': services_str,
            'country': country,
            'multiService': '1',  # Indicar n√∫mero multi-servi√ßo
            'webhook': webhook_url  # Configurar webhook
        }

        try:
            response = requests.get(self.base_url, params=params, timeout=15)
            response_text = response.text

            if "ACCESS_NUMBER" in response_text:
                _, activation_id, phone_number = response_text.split(":")
                logger.info(
                    f"‚úÖ N√∫mero multi-servi√ßo com webhook: {phone_number} (ID: {activation_id})")
                logger.info(f"‚úÖ Servi√ßos habilitados: {services_str}")

                # Registrar o webhook para este activation_id
                self._register_webhook_callback(activation_id, webhook_url)

                return activation_id.strip(), phone_number.strip()

            # Tratamento de erros (similar aos m√©todos anteriores)
            error_messages = {
                "NO_NUMBERS": f"Sem n√∫meros multi-servi√ßo dispon√≠veis para {services_str} no pa√≠s {country}",
                "NO_BALANCE": "Saldo insuficiente",
                "BAD_SERVICE": "Um ou mais c√≥digos de servi√ßo inv√°lidos",
                "BAD_KEY": "Chave de API inv√°lida"
            }

            for error_code, message in error_messages.items():
                if error_code in response_text:
                    logger.error(f"‚ùå {message}")
                    return None, None

            logger.error(f"‚ùå Erro desconhecido: {response_text}")
            return None, None

        except Exception as e:
            logger.error(
                f"‚ùå Erro ao comprar n√∫mero multi-servi√ßo com webhook: {str(e)}")
            return None, None

    def _register_webhook_callback(self, activation_id, webhook_url):
        """
        Registra a associa√ß√£o entre um activation_id e uma URL de webhook.
        Em um sistema real, isso seria armazenado em banco de dados.
        """
        try:
            # Diret√≥rio para armazenar callbacks
            sms_data_dir = "sms_data"
            os.makedirs(sms_data_dir, exist_ok=True)

            # Arquivo de configura√ß√£o de callbacks
            config_path = os.path.join(sms_data_dir, "callbacks.json")

            # Carregar callbacks existentes ou criar novo
            callbacks = {}
            if os.path.exists(config_path):
                with open(config_path, 'r') as f:
                    callbacks = json.load(f)

            # Registrar novo callback
            callbacks[activation_id] = webhook_url

            # Salvar configura√ß√£o atualizada
            with open(config_path, 'w') as f:
                json.dump(callbacks, f)

            logger.info(f"‚úÖ Webhook registrado para ativa√ß√£o {activation_id}")

        except Exception as e:
            logger.error(f"‚ùå Erro ao registrar webhook: {str(e)}")
